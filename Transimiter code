#include <esp_now.h>
#include <WiFi.h>

// Pin Definitions
#define ISD1820_PLAY_PIN 14
#define ISD1820_AUDIO_IN 34
#define LED_TRANSMIT 2
#define PACKET_SIZE 100

// Replace with your receiver's MAC Address
uint8_t receiverAddress[] = {0xEC, 0x62, 0x60, 0xA2, 0x58, 0xE0};

// Create a data structure for the packet
typedef struct audio_packet {
    uint16_t samples[PACKET_SIZE];
} audio_packet;

audio_packet audioData;
unsigned long lastSampleTime = 0;
bool isTransmitting = false;

// Audio processing variables
const int SAMPLES_BEFORE_SEND = 10;  // Number of samples to check before deciding to send
const int AUDIO_THRESHOLD = 50;      // Minimum value to consider as audio
int16_t prevSample = 0;             // Previous sample for basic noise filtering

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    digitalWrite(LED_TRANSMIT, status == ESP_NOW_SEND_SUCCESS ? HIGH : LOW);
    if (status != ESP_NOW_SEND_SUCCESS) {
        Serial.println("Failed to deliver packet");
    }
    delayMicroseconds(100);
    digitalWrite(LED_TRANSMIT, LOW);
}

// Function to check if there's valid audio
bool hasValidAudio() {
    int validSamples = 0;
    for(int i = 0; i < SAMPLES_BEFORE_SEND; i++) {
        int sample = analogRead(ISD1820_AUDIO_IN);
        if(abs(sample) > AUDIO_THRESHOLD) {
            validSamples++;
        }
        delayMicroseconds(100);
    }
    return validSamples >= (SAMPLES_BEFORE_SEND / 2);
}

void setup() {
    Serial.begin(115200);
    
    // Configure ADC
    analogSetWidth(12);        // Set ADC resolution to 12 bits
    analogSetAttenuation(ADC_11db); // Set ADC attenuation for higher voltage range
    analogSetPinAttenuation(ISD1820_AUDIO_IN, ADC_11db);
    
    pinMode(ISD1820_PLAY_PIN, INPUT);
    pinMode(ISD1820_AUDIO_IN, INPUT);
    pinMode(LED_TRANSMIT, OUTPUT);

    // Initialize WiFi in Station mode
    WiFi.mode(WIFI_STA);
    Serial.print("Transmitter MAC: ");
    Serial.println(WiFi.macAddress());

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("ESP-NOW init failed");
        return;
    }
    
    esp_now_register_send_cb(OnDataSent);

    // Register peer
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, receiverAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
        Serial.println("Failed to add peer");
        return;
    }

    Serial.println("Transmitter Ready");
}

void loop() {
    static unsigned long lastDebugTime = 0;
    
    if (digitalRead(ISD1820_PLAY_PIN) == HIGH) {
        // Debug raw audio values every second
        if (millis() - lastDebugTime > 1000) {
            Serial.println("Raw audio values (10 samples):");
            for(int i = 0; i < 10; i++) {
                int raw = analogRead(ISD1820_AUDIO_IN);
                Serial.println(raw);
                delay(10);
            }
            lastDebugTime = millis();
        }

        if (!isTransmitting && hasValidAudio()) {
            isTransmitting = true;
            Serial.println("Started transmitting");
        }

        if (isTransmitting) {
            // Sample audio
            for (int i = 0; i < PACKET_SIZE; i++) {
                while (micros() - lastSampleTime < 125) {
                    delayMicroseconds(1);
                }
                
                int sample = analogRead(ISD1820_AUDIO_IN);
                
                // Simple noise filtering
                if (abs(sample - prevSample) < 10) {
                    sample = prevSample;
                }
                prevSample = sample;

                audioData.samples[i] = sample;
                
                if (i % 20 == 0) {
                    Serial.print("Sample: ");
                    Serial.println(sample);
                }
                
                lastSampleTime = micros();
            }

            // Send the packet
            esp_err_t result = esp_now_send(receiverAddress, (uint8_t*)&audioData, sizeof(audio_packet));
            if (result != ESP_OK) {
                Serial.print("Send Error: ");
                Serial.println(esp_err_to_name(result));
            }
        }
    } else if (isTransmitting) {
        isTransmitting = false;
        Serial.println("Stopped transmitting");
    }
}
